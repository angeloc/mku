#!/usr/bin/python3
#MKU, template based rootfs builder for Ubuntu.
#Copyright (C) 2013 Angelo Compagnucci <angelo.compagnucci@gmail.com>

#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import subprocess
import argparse
import os
import configparser
import sys
import importlib
import inspect

DEPS = ["qemu-arm-static", "curl"]
DEPS_PACKAGES = ["qemu-user-static","curl"]
BOARD_CONFIGS_PATH = os.path.join(os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) , "boards")
PRECISE_CORE_URL = "http://cdimage.ubuntu.com/ubuntu-core/releases/precise/release/ubuntu-core-12.04.2-core-armhf.tar.gz"
QUANTAL_CORE_URL = "http://cdimage.ubuntu.com/ubuntu-core/releases/quantal/release/ubuntu-core-12.10-core-armhf.tar.gz"
PROJECT_FILENAME = "project.mku"

#GLOBAL VARIABLES
name              = None 
append_timest     = None
core_url          = None
os_version        = None
board_script      = None
runtime_deps      = None
root_password     = None
new_user          = None
new_user_password = None
new_user_is_admin = None
args              = None
interface         = None
use_dhcp          = None
address           = None
netmask           = None
address           = None
dns_servers       = None
boardlib          = None
update            = None

rootfs_path = os.path.join(os.getcwd(), "rootfs")
boot_path = os.path.join(os.getcwd(), "boot")

INTERFACES = ""
SETUP_SCRIPT = """
echo "{interfaces}" > /etc/network/interfaces
locale-gen en_US.UTF-8

{set_root_password} && echo root:{root_password} | chpasswd
{set_new_user}      && useradd {new_user} -m -p {new_user_password} {is_admin}

echo 'Acquire::Languages "none";' > /etc/apt/apt.conf.d/99translations

echo "nameserver 8.8.8.8" > /etc/resolv.conf

sed -i "/^# deb .*universe/ s/^# //" /etc/apt/sources.list
sed -i "/^# deb .*multiverse/ s/^# //" /etc/apt/sources.list
sed -i "/^deb-src.*/ s/^/# /" /etc/apt/sources.list
{update} && apt-get update
{update} && apt-get -y install {runtime_deps}
{update} && apt-get -f -y --force-yes install

echo "Cleaning rootfs ..."
rm -rf /usr/share/doc/
rm -rf /usr/share/doc-base/
dpkg --purge man-db manpages
rm -rf /usr/share/man/
"""

sys.path.append(BOARD_CONFIGS_PATH)

def check_args():
  from argparse import RawTextHelpFormatter
  parser = argparse.ArgumentParser(formatter_class=RawTextHelpFormatter)
  
  parser.add_argument("mode", 
    help = '''list           : list supported platforms
prepare        : prepares the environment, makes folders, downloads software
prepare_kernel : download and configure kernel sources for selected platform
scratchboxit   : prepare a scratchbox2 development environment
pack           : makes a tar.gz from your boot and rootfs
install_boot   : copy boot files into supplied boot folder
install_rootfs : copy rootfs files into supplied rootfs folder
''',
    choices=['list','prepare', 'prepare_kernel', 'scratchboxit', 'pack', "install_boot", "install_rootfs"])
  
  parser.add_argument("-d", "--destination",
    help = "Destination folder, works for install_boot install_rootfs commands",
    dest='destination')
  
  global args
  args = parser.parse_args()
  

def get_configuration():
  global name
  global append_timest
  global os_version
  global board_script
  global runtime_deps
  global root_password
  global new_user
  global new_user_password
  global new_user_is_admin
  global core_url
  global interface  
  global use_dhcp   
  global address    
  global netmask    
  global gateway    
  global dns_servers
  global update
  
  global boardlib
  
  config = configparser.ConfigParser()
  try:
    open(os.path.join(os.getcwd(), PROJECT_FILENAME))
  except:
    print("Cannot find %s in the current directory, please make one before proceed" % PROJECT_FILENAME)
    exit(1)
  config.read(os.path.join(os.getcwd(), PROJECT_FILENAME))
  
  # Getting mandatory parameters
  try:
    name          = config['PROJECT']['NAME']
    append_timest = True if config['PROJECT']['APPEND_TIMESTAMP'] == 'yes' else False
    os_version    = config['ROOTFS']['VERSION'].upper()
    board_script  = config['ROOTFS']['BOARD']
    runtime_deps  = config['ROOTFS']['RUNTIME_DEPS']
    root_password = config['ROOTFS']['ROOT_PASSWORD']
  except Exception as ex:
    print("%s is missing, please add it to project.mku" % ex)
    exit(1)
  
  boardlib = importlib.import_module(board_script)
  boardlib.BOARD_CONFIGS_PATH = BOARD_CONFIGS_PATH
  boardlib.os_version = os_version
  boardlib.board_script = board_script
  
  try:
    new_user          = config['ROOTFS']['USER']
    new_user_password = config['ROOTFS']['PASSWORD']
    new_user_is_admin = True if config['ROOTFS']['USER_IS_ADMIN'] == 'yes' else False
    update            = True if config['ROOTFS']['UPDATE'] == 'yes' else False
  except:
    pass
  
  try:
    interface   = config['NETWORK']['INTERFACE']
    use_dhcp    = True if config['NETWORK']['USE_DHCP'] == 'yes' else False
    address     = config['NETWORK']['ADDRESS']
    netmask     = config['NETWORK']['NETMASK']
    gateway     = config['NETWORK']['GATEWAY']
    dns_servers = config['NETWORK']['DNS_SERVERS']
  except:
    pass
  
  if os_version not in ("PRECISE", "QUANTAL"):
    print("Versions other than precise, quantal are not supperted yet")
    exit(1)
  
  core_url = eval(os_version + "_CORE_URL")
  return True

def deps_installed():
  ret = True
  try:
    for dep in DEPS:
      output = subprocess.check_output(["which" , dep])
  except:
    ret = False
  return ret

def prepare():
  if not deps_installed():
    print("""
    %s cannot work on this machine. To make it work:
    sudo apt-get install %s
    """ % ("mku", " ".join(DEPS_PACKAGES)))
    exit(1)

  curpath = os.getcwd()
  directories = ["tmp", "rootfs", "boot", "dist"]
  for directory in directories:
    try:
      os.mkdir(os.path.join(curpath, directory))
    except:
      pass
  setup_core()
  setup_board()
  setup_network()
  setup_rootfs()

def setup_core():
  filepath = os.path.join(os.getcwd(), "tmp", os_version + "-ubuntu-core.tar.gz")
  print(core_url)
  ret = subprocess.call(["curl" , "-#", "-o", filepath, "-C", "-", core_url])
  print("To extract Ubuntu core we need root permission, please provide password if requested")
  ret = subprocess.call(["sudo", "tar", "zxf", filepath, "-C", rootfs_path])
  ret = subprocess.call(["sudo", "cp" , "/usr/bin/qemu-arm-static", "rootfs/usr/bin/"])
  if ret:
    print("Something went wrong when extracting rootfs")
    exit(1)
  return ret

def setup_board():
  boardlib.board_prepare()

def setup_rootfs():
  setup_script_path = os.path.join(os.getcwd(), "rootfs", "tmp", "setup_script.sh")
  setup_script_file = open(setup_script_path, "w")
  setup_script = SETUP_SCRIPT.format(runtime_deps=runtime_deps,
                                      set_root_password = 'true' if root_password else 'false',
                                      root_password=root_password,
                                      set_new_user = 'true' if new_user else 'false',
                                      new_user=new_user,
                                      new_user_password=new_user_password,
                                      is_admin = '-G adm,sudo' if new_user_is_admin else '',
                                      interfaces=INTERFACES,
                                      update = 'true' if (runtime_deps or update) else 'false')
  setup_script_file.write(setup_script)
  setup_script_file.close()
  ret = subprocess.call(["sudo", "cp", "-a", "tmp/archives", "rootfs/var/cache/apt/"])
  ret = subprocess.call(["sudo", "mount", "-t", "proc", "proc", "rootfs/proc"])
  ret = subprocess.call(["sudo", "chroot", rootfs_path, "/bin/sh", "tmp/setup_script.sh"])
  ret = subprocess.call(["sudo", "chroot", rootfs_path, "rm", "tmp/setup_script.sh"])
  ret = subprocess.call(["sudo", "cp", "-au", "rootfs/var/cache/apt/archives/", "tmp/"])
  ret = subprocess.call(["sudo", "chroot", rootfs_path, "apt-get", "clean"])
  ret = subprocess.call(["sudo", "umount", "rootfs/proc"])

def setup_network():
  global INTERFACES
  print("Configuring network interfaces")
  INTERFACES += ("auto lo \n"
                 "iface lo inet loopback \n\n")
  if use_dhcp == "yes":
      INTERFACES +=  ("auto {interface} \n"
                     "iface {interface} inet dhcp \n".format(interface=interface))
  else:
      INTERFACES += ("auto {interface} \n"
                    "iface {interface} inet static \n"
                    "address {address} \n"
                    "netmask {netmask} \n"
                    "gateway {gateway} \n"
                    "dns-nameservers {dns_servers}\n".format(interface=interface,
                                                             address=address,
                                                             netmask=netmask,
                                                             gateway=gateway,
                                                             dns_servers=dns_servers))

def pack():
  from datetime import datetime
  timestamp = datetime.now().strftime("_%Y_%m_%d_%H_%M") if append_timest else ''
  boot_pack_path = "dist/" + name + "_boot" + timestamp + ".tar.gz"
  rootfs_pack_path = "dist/" + name + "_rootfs" + timestamp + ".tar.gz"
  print("Packing %s, please wait" % boot_pack_path) 
  ret = subprocess.call(["sudo", "tar", "cfz", boot_pack_path, "boot"])
  print("Packing %s, please wait" % rootfs_pack_path)
  ret = subprocess.call(["sudo", "tar", "cfz", rootfs_pack_path, "rootfs"])
    

def prepare_kernel_devenv():
  boardlib.prepare_kernel_devenv()

def list_boards():
  print("\nCurrently supported boards:\n")
  
  for board in sorted(os.listdir(BOARD_CONFIGS_PATH)):
    if ".py" in board:
      print(board[:-3])
  print("\n")

def install_boot(destination):
  ret = subprocess.call(" ".join(["sudo", "cp", "-uav", "boot/*", destination]), shell=True)

def install_rootfs(destination):
  ret = subprocess.call(" ".join(["sudo", "cp", "-uav", "rootfs/*", destination]), shell=True)
  
def scratchboxit():
  DEPS = ["sb2", "arm-linux-gnueabihf-gcc", "arm-linux-gnueabi-gcc", "qemu-arm"]
  DEPS_PACKAGES = ["scratchbox2", "build-essential", "qemu-user", "arm-linux-gnueabi-gcc", "gcc-arm-linux-gnueabihf"]
  try:
    for dep in DEPS:
      output = subprocess.check_output(["which" , dep])
  except:
    print("""
    Missing dependencies, you can install them with:
    sudo apt-get install %s""" % " ".join(DEPS_PACKAGES))
    exit(1)
  os.chdir("rootfs")
  ret = subprocess.call(["sb2-init", "-c", "/usr/bin/qemu-arm", name.upper(), "arm-linux-gnueabihf-gcc"])

if __name__ == "__main__":
  check_args()
  if args.mode == "list": list_boards()
  get_configuration()
  if args.mode == "prepare": prepare()
  if args.mode == "prepare_kernel": prepare_kernel_devenv()
  if args.mode == "scratchboxit": scratchboxit()
  if args.mode == "install_boot":
    if not args.destination:
      print ("Please specify a destination directory")
    install_boot(args.destination)
  if args.mode == "install_rootfs":
    if not args.destination:
      print ("Please specify a destination directory")
    install_rootfs(args.destination)
  if args.mode == "pack": pack()
  
  
